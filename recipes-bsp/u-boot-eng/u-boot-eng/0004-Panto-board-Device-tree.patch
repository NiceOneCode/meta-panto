From 07649b38f5abe379e1cee1a63ee3b96056323842 Mon Sep 17 00:00:00 2001
From: WANGA <andrea_gai@virgilio.it>
Date: Mon, 2 Jul 2018 12:19:09 +0200
Subject: [PATCH] Panto-board-Device-tree


diff --git a/board/panto/icorem6/Kconfig b/board/panto/icorem6/Kconfig
new file mode 100644
index 0000000..cd6c38a
--- /dev/null
+++ b/board/panto/icorem6/Kconfig
@@ -0,0 +1,16 @@
+if TARGET_ICOREM6
+
+config SYS_BOARD
+	default "icorem6"
+
+config SYS_VENDOR
+	default "engicam"
+
+config SYS_SOC
+	default "mx6"
+
+config SYS_CONFIG_NAME
+	default "icorem6"
+
+endif
+
diff --git a/board/panto/icorem6/MAINTAINERS b/board/panto/icorem6/MAINTAINERS
new file mode 100644
index 0000000..b9f6342
--- /dev/null
+++ b/board/panto/icorem6/MAINTAINERS
@@ -0,0 +1,9 @@
+iCoreM6 BOARD
+M:	support@engicam.com 
+S:	Maintained
+F:	board/engicam/icorem6/
+F:	include/configs/icorem6.h
+F:	configs/icorem6dl_defconfig
+F:	configs/icorem6dl_sd_defconfig
+
+
diff --git a/board/panto/icorem6/Makefile b/board/panto/icorem6/Makefile
new file mode 100644
index 0000000..2f30999
--- /dev/null
+++ b/board/panto/icorem6/Makefile
@@ -0,0 +1,9 @@
+#
+# Copyright (C) 2007, Guennadi Liakhovetski <lg@denx.de>
+#
+# (C) Copyright 2011 Freescale Semiconductor, Inc.
+#
+# SPDX-License-Identifier:	GPL-2.0+
+#
+
+obj-y  := mx6_icore.o
diff --git a/board/panto/icorem6/README b/board/panto/icorem6/README
new file mode 100644
index 0000000..f3bb75b
--- /dev/null
+++ b/board/panto/icorem6/README
@@ -0,0 +1,59 @@
+How to use U-Boot on Engicam i.Core M6 SOM
+-----------------------------------------------
+
+1. SDCARD boot
+
+	- Jumper setting on the starterkit:
+	
+	JM3: closed
+
+	- Build U-Boot for GEA M6UL for SD card boot:
+
+	$ make mrproper
+	$ make icorem6_mmc_defconfig
+	$ make
+
+	- Flash the SPL and u-boot.img images into the micro SD card:
+
+	dd if=SPL of=/dev/mmcblk0 bs=1k seek=1; sync
+	dd if=u-boot.img of=/dev/mmcblk0 bs=1k seek=69; sync
+
+
+2. eMMC boot  (only for SOM with eMMC option)
+
+	- Jumper setting on the starterkit:
+	
+	JM3: open
+
+	- Build U-Boot for GEA M6UL for eMMC boot:
+
+	$ make mrproper
+	$ make icorem6_emmc_defconfig
+	$ make
+
+
+	- Flash the SPL and u-boot.img images into the eMMC:
+
+	dd if=SPL of=/dev/mmcblk1 bs=1k seek=1; sync
+	dd if=u-boot.img of=/dev/mmcblk1 bs=1k seek=69; sync
+
+3. NAND boot (only for SOM with NAND option)
+
+	- Jumper setting on the starterkit:
+	
+	JM3: open
+
+	- Build U-Boot for GEA M6UL for NAND boot:
+
+	$ make mrproper
+	$ make icore_nand_defconfig
+	$ make
+
+	- Flashing SPL and u-boot.img in NAND:
+
+	$ flash_erase /dev/mtd0 0 0
+	$ kobs-ng init -x SPL --search_exponent=1 -v
+	$ flash_erase /dev/mtd1  0 0
+	$ nandwrite -p /dev/mtd1 u-boot.img
+
+
diff --git a/board/panto/icorem6/icorem6dl.cfg b/board/panto/icorem6/icorem6dl.cfg
new file mode 100644
index 0000000..2df79f7
--- /dev/null
+++ b/board/panto/icorem6/icorem6dl.cfg
@@ -0,0 +1,177 @@
+/*
+ * Copyright (C) 2013 Engicam srl
+ * Milco Pratesi <support@engicam.com>
+ *
+ * based on Freescale file:
+ * Copyright (C) 2013 Freescale Semiconductor, Inc.
+ * Jason Liu <r64343@freescale.com>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not write to the Free Software
+ * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
+ * MA 02110-1301 USA
+ *
+ * Refer docs/README.imxmage for more details about how-to configure
+ * and create imximage boot image
+ *
+ * The syntax is taken as close as possible with the kwbimage
+ */
+/* image version */
+
+#define __ASSEMBLY__
+#include <config.h>
+
+IMAGE_VERSION 2
+
+/*
+ * Boot Device : one of spi, sd, eimnor, nand, sata:
+ * spinor: flash_offset: 0x0400
+ * nand:   flash_offset: 0x0400
+ * sata:   flash_offset: 0x0400
+ * sd/mmc: flash_offset: 0x0400
+ * eimnor: flash_offset: 0x1000
+ */
+
+
+BOOT_FROM	sd
+
+#ifdef CONFIG_USE_PLUGIN
+/*PLUGIN    plugin-binary-file    IRAM_FREE_START_ADDR*/
+PLUGIN	board/freescale/mx6qsabreauto/plugin.bin 0x00907000
+#else
+
+#ifdef CONFIG_SECURE_BOOT
+SECURE_BOOT
+#endif
+
+/*
+ * Device Configuration Data (DCD)
+ *
+ * Each entry must have the format:
+ * Addr-type           Address        Value
+ *
+ * where:
+ *	Addr-type register length (1,2 or 4 bytes)
+ *	Address	  absolute address of the register
+ *	value	  value to be stored in the register
+ */
+DATA 4, 0x020e0774, 0x000c0000
+DATA 4, 0x020e0754, 0x00000000
+DATA 4, 0x020e04ac, 0x00000030
+DATA 4, 0x020e04b0, 0x00000030
+DATA 4, 0x020e0464, 0x00000030
+DATA 4, 0x020e0490, 0x00000030
+DATA 4, 0x020e074c, 0x00000030
+DATA 4, 0x020e0494, 0x00000030
+//DATA 4, 0x020e04a4, 0x00003000
+//DATA 4, 0x020e04a8, 0x00003000
+DATA 4, 0x020e04a0, 0x00000000
+DATA 4, 0x020e04b4, 0x00000030
+DATA 4, 0x020e04b8, 0x00000030
+DATA 4, 0x020e076c, 0x00000030
+DATA 4, 0x020e0750, 0x00020000
+DATA 4, 0x020e04bc, 0x00000028
+DATA 4, 0x020e04c0, 0x00000028
+DATA 4, 0x020e04c4, 0x00000028
+DATA 4, 0x020e04c8, 0x00000028
+DATA 4, 0x020e04cc, 0x00000028
+DATA 4, 0x020e04d0, 0x00000028
+DATA 4, 0x020e04d4, 0x00000028
+DATA 4, 0x020e04d8, 0x00000028
+DATA 4, 0x020e0760, 0x00020000
+DATA 4, 0x020e0764, 0x00000028
+DATA 4, 0x020e0770, 0x00000028
+DATA 4, 0x020e0778, 0x00000028
+DATA 4, 0x020e077c, 0x00000028
+DATA 4, 0x020e0780, 0x00000028
+DATA 4, 0x020e0784, 0x00000028
+DATA 4, 0x020e078c, 0x00000028
+DATA 4, 0x020e0748, 0x00000028
+DATA 4, 0x020e0470, 0x00000028
+DATA 4, 0x020e0474, 0x00000028
+DATA 4, 0x020e0478, 0x00000028
+DATA 4, 0x020e047c, 0x00000028
+DATA 4, 0x020e0480, 0x00000028
+DATA 4, 0x020e0484, 0x00000028
+DATA 4, 0x020e0488, 0x00000028
+DATA 4, 0x020e048c, 0x00000028
+DATA 4, 0x021b0800, 0xa1390003
+DATA 4, 0x021b4800, 0xa1390003
+DATA 4, 0x021b080c, 0x001F0024
+DATA 4, 0x021b0810, 0x00110018
+DATA 4, 0x021b083c, 0x4230022C
+DATA 4, 0x021b0840, 0x02180220
+DATA 4, 0x021b483c, 0x42440248
+DATA 4, 0x021b4840, 0x02300238
+DATA 4, 0x021b0848, 0x44444A48
+DATA 4, 0x021b0850, 0x38383234
+DATA 4, 0x021b4848, 0x46484A42
+DATA 4, 0x021b4850, 0x3C34362E
+DATA 4, 0x021b081c, 0x33333333
+DATA 4, 0x021b0820, 0x33333333
+DATA 4, 0x021b0824, 0x33333333
+DATA 4, 0x021b0828, 0x33333333
+DATA 4, 0x021b481c, 0x33333333
+DATA 4, 0x021b4820, 0x33333333
+DATA 4, 0x021b4824, 0x33333333
+DATA 4, 0x021b4828, 0x33333333
+DATA 4, 0x021b08b8, 0x00000800
+DATA 4, 0x021b48b8, 0x00000800
+DATA 4, 0x021b0004, 0x0002002d
+DATA 4, 0x021b0008, 0x00333030
+DATA 4, 0x021b000c, 0x696d5323
+DATA 4, 0x021b0010, 0xb66e8c63
+DATA 4, 0x021b0014, 0x01ff00db
+DATA 4, 0x021b0018, 0x00001740
+DATA 4, 0x021b001c, 0x00008000
+DATA 4, 0x021b002c, 0x000026d2
+DATA 4, 0x021b0030, 0x006d0e21
+DATA 4, 0x021b0040, 0x00000047	/* 2GB CS0 for autodetect RAM size */
+
+#ifdef CONFIG_MX6SOLO
+DATA 4, 0x021b0000, 0x83190000
+#else
+DATA 4, 0x021b0000, 0x841A0000
+#endif
+
+DATA 4, 0x021b001c, 0x04008032
+DATA 4, 0x021b001c, 0x00008033
+DATA 4, 0x021b001c, 0x00048031
+DATA 4, 0x021b001c, 0x07208030
+DATA 4, 0x021b001c, 0x04008040
+DATA 4, 0x021b0020, 0x00005800
+DATA 4, 0x021b0818, 0x00011117
+DATA 4, 0x021b4818, 0x00011117
+DATA 4, 0x021b0004, 0x0002556d
+DATA 4, 0x021b4004, 0x00011006
+DATA 4, 0x021b001c, 0x00000000
+                              
+
+/* set the default clock gate to save power */
+DATA 4, 0x020c4068, 0x00003F3F
+DATA 4, 0x020c406C, 0x0030FC00
+DATA 4, 0x020c4070, 0x000FC000
+DATA 4, 0x020c4074, 0x33300000
+DATA 4, 0x020c4078, 0xFF00F300
+DATA 4, 0x020c407C, 0x0F000003
+DATA 4, 0x020c4080, 0x000003CF
+
+/* enable AXI cache for VDOA/VPU/IPU */
+DATA 4, 0x020e0010, 0xF00000CF
+/* set IPU AXI-id0 Qos=0xf(bypass) AXI-id1 Qos=0x7 */
+DATA 4, 0x020e0018, 0x007F007F
+DATA 4, 0x020e001c, 0x007F007F
+#endif
diff --git a/board/panto/icorem6/icorem6dp.cfg b/board/panto/icorem6/icorem6dp.cfg
new file mode 100644
index 0000000..91da3b3
--- /dev/null
+++ b/board/panto/icorem6/icorem6dp.cfg
@@ -0,0 +1,192 @@
+/*
+ * Copyright (C) 2016 Engicam srl
+ * Milco Pratesi <support@engicam.com>
+ *
+ * based on Freescale file:
+ * Copyright (C) 2013 Freescale Semiconductor, Inc.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not write to the Free Software
+ * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
+ * MA 02110-1301 USA
+ *
+ * Refer docs/README.imxmage for more details about how-to configure
+ * and create imximage boot image
+ *
+ * The syntax is taken as close as possible with the kwbimage
+ */
+/* image version */
+
+#define __ASSEMBLY__
+#include <config.h>
+#include "asm/arch/mx6-ddr.h"
+#include "asm/arch/iomux.h"
+#include "asm/arch/crm_regs.h"
+
+IMAGE_VERSION 2
+
+/*
+ * Boot Device : one of spi, sd, eimnor, nand, sata:
+ * spinor: flash_offset: 0x0400
+ * nand:   flash_offset: 0x0400
+ * sata:   flash_offset: 0x0400
+ * sd/mmc: flash_offset: 0x0400
+ * eimnor: flash_offset: 0x1000
+ */
+
+
+BOOT_FROM	sd
+
+#ifdef CONFIG_USE_PLUGIN
+/*PLUGIN    plugin-binary-file    IRAM_FREE_START_ADDR*/
+PLUGIN	board/freescale/mx6qsabreauto/plugin.bin 0x00907000
+#else
+
+#ifdef CONFIG_SECURE_BOOT
+SECURE_BOOT
+#endif
+
+/*
+ * Device Configuration Data (DCD)
+ *
+ * Each entry must have the format:
+ * Addr-type           Address        Value
+ *
+ * where:
+ *	Addr-type register length (1,2 or 4 bytes)
+ *	Address	  absolute address of the register
+ *	value	  value to be stored in the register
+ */
+DATA 4, MX6_IOM_DRAM_SDQS0, 0x00000028         
+DATA 4, MX6_IOM_DRAM_SDQS1, 0x00000028         
+DATA 4, MX6_IOM_DRAM_SDQS2, 0x00000028         
+DATA 4, MX6_IOM_DRAM_SDQS3, 0x00000028         
+DATA 4, MX6_IOM_DRAM_SDQS4, 0x00000028         
+DATA 4, MX6_IOM_DRAM_SDQS5, 0x00000028         
+DATA 4, MX6_IOM_DRAM_SDQS6, 0x00000028         
+DATA 4, MX6_IOM_DRAM_SDQS7, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM0, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM1, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM2, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM3, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM4, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM5, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM6, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM7, 0x00000028         
+DATA 4, MX6_IOM_DRAM_CAS, 0x00000030         
+DATA 4, MX6_IOM_DRAM_RAS, 0x00000030         
+DATA 4, MX6_IOM_DRAM_SDCLK_0, 0x00000030         
+DATA 4, MX6_IOM_DRAM_SDCLK_1, 0x00000030         
+DATA 4, MX6_IOM_DRAM_RESET, 0x00000030         
+DATA 4, MX6_IOM_DRAM_SDCKE0, 0x00003000         
+DATA 4, MX6_IOM_DRAM_SDCKE1, 0x00003000         
+DATA 4, MX6_IOM_DRAM_SDBA2, 0x00000000         
+DATA 4, MX6_IOM_DRAM_SDODT0, 0x00000030         
+DATA 4, MX6_IOM_DRAM_SDODT1, 0x00000030         
+DATA 4, MX6_IOM_GRP_B0DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_B1DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_B2DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_B3DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_B4DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_B5DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_B6DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_B7DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_ADDDS, 0x00000030         
+DATA 4, MX6_IOM_DDRMODE_CTL, 0x00020000         
+DATA 4, MX6_IOM_GRP_DDRPKE, 0x00000000         
+DATA 4, MX6_IOM_GRP_DDRMODE, 0x00020000         
+DATA 4, MX6_IOM_GRP_CTLDS, 0x00000030         
+DATA 4, MX6_IOM_GRP_DDR_TYPE, 0x000C0000   
+      
+DATA 4, MX6_MMDC_P0_MPRDDQBY0DL, 0x33333333         
+DATA 4, MX6_MMDC_P0_MPRDDQBY1DL, 0x33333333         
+DATA 4, MX6_MMDC_P0_MPRDDQBY2DL, 0x33333333         
+DATA 4, MX6_MMDC_P0_MPRDDQBY3DL, 0x33333333         
+DATA 4, MX6_MMDC_P1_MPRDDQBY0DL, 0x33333333         
+DATA 4, MX6_MMDC_P1_MPRDDQBY1DL, 0x33333333         
+DATA 4, MX6_MMDC_P1_MPRDDQBY2DL, 0x33333333         
+DATA 4, MX6_MMDC_P1_MPRDDQBY3DL, 0x33333333         
+DATA 4, MX6_MMDC_P0_MDMISC, 0x00001740         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x00008000         
+DATA 4, MX6_MMDC_P0_MDCFG0, 0x8A8F7955         
+DATA 4, MX6_MMDC_P0_MDCFG1, 0xFF328F64         
+DATA 4, MX6_MMDC_P0_MDCFG2, 0x01FF00DB         
+DATA 4, MX6_MMDC_P0_MDRWD, 0x000026D2         
+DATA 4, MX6_MMDC_P0_MDOR, 0x008F1023         
+DATA 4, MX6_MMDC_P0_MDOTC, 0x09444040         
+DATA 4, MX6_MMDC_P0_MDPDC, 0x00025576     
+DATA 4, MX6_MMDC_P0_MDASP, 0x00000047         
+DATA 4, MX6_MMDC_P0_MDCTL, 0x841A0000         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x04088032         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x0408803A         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x00008033         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x0000803B         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x00428031         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x00428039         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x09408030         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x09408038         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x04008040         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x04008048         
+DATA 4, MX6_MMDC_P0_MPZQHWCTRL, 0xA1390003         
+DATA 4, MX6_MMDC_P1_MPZQHWCTRL, 0xA1380003         
+DATA 4, MX6_MMDC_P0_MDREF, 0x00005800         
+DATA 4, MX6_MMDC_P0_MPODTCTRL, 0x00011117         
+DATA 4, MX6_MMDC_P1_MPODTCTRL, 0x00011117         
+DATA 4, MX6_MMDC_P0_MPDGCTRL0, 0x03180324         
+DATA 4, MX6_MMDC_P0_MPDGCTRL1, 0x03080308         
+DATA 4, MX6_MMDC_P1_MPDGCTRL0, 0x0314031C         
+DATA 4, MX6_MMDC_P1_MPDGCTRL1, 0x03000254         
+DATA 4, MX6_MMDC_P0_MPRDDLCTL, 0x4034363A         
+DATA 4, MX6_MMDC_P1_MPRDDLCTL, 0x38362E3E         
+DATA 4, MX6_MMDC_P0_MPWRDLCTL, 0x36343A3E         
+DATA 4, MX6_MMDC_P1_MPWRDLCTL, 0x4A384A44         
+DATA 4, MX6_MMDC_P0_MPWLDECTRL0, 0x00060004         
+DATA 4, MX6_MMDC_P0_MPWLDECTRL1, 0x00060002         
+DATA 4, MX6_MMDC_P1_MPWLDECTRL0, 0x00000000         
+DATA 4, MX6_MMDC_P1_MPWLDECTRL1, 0x00000000         
+DATA 4, MX6_MMDC_P0_MPMUR0, 0x00000800         
+DATA 4, MX6_MMDC_P1_MPMUR0, 0x00000800         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x00000000         
+DATA 4, MX6_MMDC_P0_MAPSR, 0x00011006         
+                                       
+
+/* set the default clock gate to save power */
+
+DATA 4, CCM_CCGR0, 0x00003F3F         
+DATA 4, CCM_CCGR1, 0x0030FC00         
+DATA 4, CCM_CCGR2, 0x03FFC000         
+DATA 4, CCM_CCGR3, 0x33300000         
+DATA 4, CCM_CCGR4, 0xFF00F300         
+DATA 4, CCM_CCGR5, 0x0F0000C3         
+DATA 4, CCM_CCGR6, 0x000003CC        
+
+/* set the default clock gate to save power */
+/* i.Core MX6Q
+DATA 4, CCM_CCGR0, 0x00003F3F         
+DATA 4, CCM_CCGR1, 0x0030FC00         
+DATA 4, CCM_CCGR2, 0x000FC000         
+DATA 4, CCM_CCGR3, 0x33300000         
+DATA 4, CCM_CCGR4, 0xFF00F300         
+DATA 4, CCM_CCGR5, 0x0F0000C3         
+DATA 4, CCM_CCGR6, 0x000003CC         
+*/
+
+/* enable AXI cache for VDOA/VPU/IPU */
+DATA 4, MX6_IOMUXC_GPR4, 0xF00000CF
+/* set IPU AXI-id0 Qos=0xf(bypass) AXI-id1 Qos=0x7 */
+DATA 4, MX6_IOMUXC_GPR6, 0x007F007F
+DATA 4, MX6_IOMUXC_GPR7, 0x007F007F
+#endif
diff --git a/board/panto/icorem6/icorem6q.cfg b/board/panto/icorem6/icorem6q.cfg
new file mode 100644
index 0000000..a9a9cbf
--- /dev/null
+++ b/board/panto/icorem6/icorem6q.cfg
@@ -0,0 +1,180 @@
+/*
+ * Copyright (C) 2016 Engicam srl
+ * Milco Pratesi <support@engicam.com>
+ *
+ * based on Freescale file:
+ * Copyright (C) 2013 Freescale Semiconductor, Inc.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not write to the Free Software
+ * Foundation Inc. 51 Franklin Street Fifth Floor Boston,
+ * MA 02110-1301 USA
+ *
+ * Refer docs/README.imxmage for more details about how-to configure
+ * and create imximage boot image
+ *
+ * The syntax is taken as close as possible with the kwbimage
+ */
+/* image version */
+
+#define __ASSEMBLY__
+#include <config.h>
+#include "asm/arch/mx6-ddr.h"
+#include "asm/arch/iomux.h"
+#include "asm/arch/crm_regs.h"
+
+IMAGE_VERSION 2
+
+/*
+ * Boot Device : one of spi, sd, eimnor, nand, sata:
+ * spinor: flash_offset: 0x0400
+ * nand:   flash_offset: 0x0400
+ * sata:   flash_offset: 0x0400
+ * sd/mmc: flash_offset: 0x0400
+ * eimnor: flash_offset: 0x1000
+ */
+
+
+BOOT_FROM	sd
+
+#ifdef CONFIG_USE_PLUGIN
+/*PLUGIN    plugin-binary-file    IRAM_FREE_START_ADDR*/
+PLUGIN	board/freescale/mx6qsabreauto/plugin.bin 0x00907000
+#else
+
+#ifdef CONFIG_SECURE_BOOT
+SECURE_BOOT
+#endif
+
+/*
+ * Device Configuration Data (DCD)
+ *
+ * Each entry must have the format:
+ * Addr-type           Address        Value
+ *
+ * where:
+ *	Addr-type register length (1,2 or 4 bytes)
+ *	Address	  absolute address of the register
+ *	value	  value to be stored in the register
+ */
+DATA 4, MX6_IOM_DRAM_SDQS0, 0x00000028         
+DATA 4, MX6_IOM_DRAM_SDQS1, 0x00000028         
+DATA 4, MX6_IOM_DRAM_SDQS2, 0x00000028         
+DATA 4, MX6_IOM_DRAM_SDQS3, 0x00000028         
+DATA 4, MX6_IOM_DRAM_SDQS4, 0x00000028         
+DATA 4, MX6_IOM_DRAM_SDQS5, 0x00000028         
+DATA 4, MX6_IOM_DRAM_SDQS6, 0x00000028         
+DATA 4, MX6_IOM_DRAM_SDQS7, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM0, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM1, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM2, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM3, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM4, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM5, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM6, 0x00000028         
+DATA 4, MX6_IOM_DRAM_DQM7, 0x00000028         
+DATA 4, MX6_IOM_DRAM_CAS, 0x00000030         
+DATA 4, MX6_IOM_DRAM_RAS, 0x00000030         
+DATA 4, MX6_IOM_DRAM_SDCLK_0, 0x00000030         
+DATA 4, MX6_IOM_DRAM_SDCLK_1, 0x00000030         
+DATA 4, MX6_IOM_DRAM_RESET, 0x00000030         
+DATA 4, MX6_IOM_DRAM_SDCKE0, 0x00003000         
+DATA 4, MX6_IOM_DRAM_SDCKE1, 0x00003000         
+DATA 4, MX6_IOM_DRAM_SDBA2, 0x00000000         
+DATA 4, MX6_IOM_DRAM_SDODT0, 0x00000030         
+DATA 4, MX6_IOM_DRAM_SDODT1, 0x00000030         
+DATA 4, MX6_IOM_GRP_B0DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_B1DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_B2DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_B3DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_B4DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_B5DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_B6DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_B7DS, 0x00000030         
+DATA 4, MX6_IOM_GRP_ADDDS, 0x00000030         
+DATA 4, MX6_IOM_DDRMODE_CTL, 0x00020000         
+DATA 4, MX6_IOM_GRP_DDRPKE, 0x00000000         
+DATA 4, MX6_IOM_GRP_DDRMODE, 0x00020000         
+DATA 4, MX6_IOM_GRP_CTLDS, 0x00000030         
+DATA 4, MX6_IOM_GRP_DDR_TYPE, 0x000C0000   
+      
+DATA 4, MX6_MMDC_P0_MPRDDQBY0DL, 0x33333333         
+DATA 4, MX6_MMDC_P0_MPRDDQBY1DL, 0x33333333         
+DATA 4, MX6_MMDC_P0_MPRDDQBY2DL, 0x33333333         
+DATA 4, MX6_MMDC_P0_MPRDDQBY3DL, 0x33333333         
+DATA 4, MX6_MMDC_P1_MPRDDQBY0DL, 0x33333333         
+DATA 4, MX6_MMDC_P1_MPRDDQBY1DL, 0x33333333         
+DATA 4, MX6_MMDC_P1_MPRDDQBY2DL, 0x33333333         
+DATA 4, MX6_MMDC_P1_MPRDDQBY3DL, 0x33333333         
+DATA 4, MX6_MMDC_P0_MDMISC, 0x00001740         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x00008000         
+DATA 4, MX6_MMDC_P0_MDCFG0, 0x8A8F7955         
+DATA 4, MX6_MMDC_P0_MDCFG1, 0xFF328F64         
+DATA 4, MX6_MMDC_P0_MDCFG2, 0x01FF00DB         
+DATA 4, MX6_MMDC_P0_MDRWD, 0x000026D2         
+DATA 4, MX6_MMDC_P0_MDOR, 0x008F1023         
+DATA 4, MX6_MMDC_P0_MDOTC, 0x09444040         
+DATA 4, MX6_MMDC_P0_MDPDC, 0x00025576         
+DATA 4, MX6_MMDC_P0_MDASP, 0x00000047         
+DATA 4, MX6_MMDC_P0_MDCTL, 0x841A0000         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x04088032         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x0408803A         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x00008033         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x0000803B         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x00428031         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x00428039         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x09408030         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x09408038         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x04008040         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x04008048         
+DATA 4, MX6_MMDC_P0_MPZQHWCTRL, 0xA1390003         
+DATA 4, MX6_MMDC_P1_MPZQHWCTRL, 0xA1380003         
+DATA 4, MX6_MMDC_P0_MDREF, 0x00005800         
+DATA 4, MX6_MMDC_P0_MPODTCTRL, 0x00011117         
+DATA 4, MX6_MMDC_P1_MPODTCTRL, 0x00011117         
+DATA 4, MX6_MMDC_P0_MPDGCTRL0, 0x43280334         
+DATA 4, MX6_MMDC_P0_MPDGCTRL1, 0x031C0314         
+DATA 4, MX6_MMDC_P1_MPDGCTRL0, 0x4318031C         
+DATA 4, MX6_MMDC_P1_MPDGCTRL1, 0x030C0258         
+DATA 4, MX6_MMDC_P0_MPRDDLCTL, 0x3E343A40         
+DATA 4, MX6_MMDC_P1_MPRDDLCTL, 0x383C3844         
+DATA 4, MX6_MMDC_P0_MPWRDLCTL, 0x40404440         
+DATA 4, MX6_MMDC_P1_MPWRDLCTL, 0x4C3E4446         
+DATA 4, MX6_MMDC_P0_MPWLDECTRL0, 0x000E0009         
+DATA 4, MX6_MMDC_P0_MPWLDECTRL1, 0x0018000E         
+DATA 4, MX6_MMDC_P1_MPWLDECTRL0, 0x00000007         
+DATA 4, MX6_MMDC_P1_MPWLDECTRL1, 0x00000000         
+DATA 4, MX6_MMDC_P0_MPMUR0, 0x00000800         
+DATA 4, MX6_MMDC_P1_MPMUR0, 0x00000800         
+DATA 4, MX6_MMDC_P0_MDSCR, 0x00000000         
+DATA 4, MX6_MMDC_P0_MAPSR, 0x00011006         
+                                       
+
+/* set the default clock gate to save power */
+DATA 4, CCM_CCGR0, 0x00003F3F         
+DATA 4, CCM_CCGR1, 0x0030FC00         
+DATA 4, CCM_CCGR2, 0x000FC000         
+DATA 4, CCM_CCGR3, 0x33300000         
+DATA 4, CCM_CCGR4, 0xFF00F300         
+DATA 4, CCM_CCGR5, 0x0F0000C3         
+DATA 4, CCM_CCGR6, 0x000003CC         
+
+/* enable AXI cache for VDOA/VPU/IPU */
+DATA 4, MX6_IOMUXC_GPR4, 0xF00000CF
+/* set IPU AXI-id0 Qos=0xf(bypass) AXI-id1 Qos=0x7 */
+DATA 4, MX6_IOMUXC_GPR6, 0x007F007F
+DATA 4, MX6_IOMUXC_GPR7, 0x007F007F
+#endif
diff --git a/board/panto/icorem6/mx6_icore.c b/board/panto/icorem6/mx6_icore.c
new file mode 100644
index 0000000..be9f6c8
--- /dev/null
+++ b/board/panto/icorem6/mx6_icore.c
@@ -0,0 +1,1190 @@
+/*
+ * Copyright (C) 2012-2014 Freescale Semiconductor, Inc.
+ *
+ * Author: Fabio Estevam <fabio.estevam@freescale.com>
+ * Author: Jason Liu <r64343@freescale.com>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <common.h>
+#include <asm/io.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/imx-regs.h>
+#include <asm/arch/iomux.h>
+#include <asm/arch/mx6-pins.h>
+#include <asm/arch/crm_regs.h>
+#include <asm/errno.h>
+#include <asm/gpio.h>
+#include <asm/imx-common/iomux-v3.h>
+#include <asm/imx-common/boot_mode.h>
+#include <i2c.h>
+#include <asm/imx-common/mxc_i2c.h>
+#include <mmc.h>
+#include <fsl_esdhc.h>
+#include <miiphy.h>
+#include <netdev.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/arch/mxc_hdmi.h>
+#include "../../../drivers/video/mxcfb.h"
+#include <linux/fb.h>
+#include <ipu_pixfmt.h>
+
+#include <malloc.h>
+#include <asm/processor.h>
+#include <asm/mach-types.h>
+ 
+
+
+#ifdef CONFIG_FASTBOOT
+#include <fastboot.h>
+#ifdef CONFIG_ANDROID_RECOVERY
+#include <recovery.h>
+#endif
+#endif /*CONFIG_FASTBOOT*/
+
+DECLARE_GLOBAL_DATA_PTR;
+
+
+#define EDIMM_VERSION IMX_GPIO_NR(6, 31)
+
+#define I2C_EXP_RST IMX_GPIO_NR(1, 15)
+#define I2C3_STEER  IMX_GPIO_NR(5, 4)
+#define UART_PAD_CTRL  (PAD_CTL_PKE | PAD_CTL_PUE |            \
+	PAD_CTL_PUS_100K_UP | PAD_CTL_SPEED_MED |               \
+	PAD_CTL_DSE_40ohm   | PAD_CTL_SRE_FAST  | PAD_CTL_HYS)
+
+#define USDHC_PAD_CTRL (PAD_CTL_PKE | PAD_CTL_PUE |            \
+	PAD_CTL_PUS_47K_UP  | PAD_CTL_SPEED_LOW |               \
+	PAD_CTL_DSE_80ohm   | PAD_CTL_SRE_FAST  | PAD_CTL_HYS)
+
+/*Need more drive strength for SD1 slot on base board*/
+#define USDHC1_PAD_CTRL (PAD_CTL_PKE | PAD_CTL_PUE |            \
+	PAD_CTL_PUS_47K_UP  | PAD_CTL_SPEED_LOW |               \
+	PAD_CTL_DSE_40ohm   | PAD_CTL_SRE_FAST  | PAD_CTL_HYS)
+
+/* New improvment for iCoreM6*/
+#define	USDHC1_PAD_CTRL_CLK	0x10070
+
+/* New improvment for iCoreM6*/
+#define USDHC1_PAD_CTRL_NEW	0x17070
+
+#define ENET_PAD_CTRL  (PAD_CTL_PKE | PAD_CTL_PUE |		\
+	PAD_CTL_PUS_100K_UP | PAD_CTL_SPEED_MED   |		\
+	PAD_CTL_DSE_40ohm   | PAD_CTL_HYS)
+
+#define SPI_PAD_CTRL (PAD_CTL_HYS |				\
+	PAD_CTL_PUS_100K_DOWN | PAD_CTL_SPEED_MED |		\
+	PAD_CTL_DSE_40ohm     | PAD_CTL_SRE_FAST)
+
+#define WEIM_NOR_PAD_CTRL (PAD_CTL_PKE | PAD_CTL_PUE |		\
+	PAD_CTL_PUS_100K_UP | PAD_CTL_SPEED_MED |		\
+	PAD_CTL_DSE_40ohm   | PAD_CTL_SRE_FAST)
+
+
+#define GPMI_PAD_CTRL0 (PAD_CTL_PKE | PAD_CTL_PUE | PAD_CTL_PUS_100K_UP)
+#define GPMI_PAD_CTRL1 (PAD_CTL_DSE_40ohm | PAD_CTL_SPEED_MED | \
+			PAD_CTL_SRE_FAST)
+#define GPMI_PAD_CTRL2 (GPMI_PAD_CTRL0 | GPMI_PAD_CTRL1)
+
+#define I2C_PAD_CTRL	(PAD_CTL_PKE | PAD_CTL_PUE |		\
+	PAD_CTL_PUS_100K_UP | PAD_CTL_SPEED_MED |		\
+	PAD_CTL_DSE_40ohm | PAD_CTL_HYS |			\
+	PAD_CTL_ODE | PAD_CTL_SRE_FAST)
+
+#ifdef CONFIG_I2C_MXC
+#define PC MUX_PAD_CTRL(I2C_PAD_CTRL)
+
+/* I2C2 */
+struct i2c_pads_info i2c_pad_info1 = {
+	/* don't support Sabreauto REVA */
+	.scl = {
+		.i2c_mode = MX6_PAD_KEY_COL3__I2C2_SCL | PC,
+		.gpio_mode = MX6_PAD_KEY_COL3__GPIO4_IO12 | PC,
+		.gp = IMX_GPIO_NR(4, 12)
+	},
+	.sda = {
+		.i2c_mode = MX6_PAD_KEY_ROW3__I2C2_SDA | PC,
+		.gpio_mode = MX6_PAD_KEY_ROW3__GPIO4_IO13 | PC,
+		.gp = IMX_GPIO_NR(4, 13)
+	}
+};
+
+/* I2C3 */
+struct i2c_pads_info i2c_pad_info2 = {
+	.scl = {
+		.i2c_mode = MX6_PAD_GPIO_5__I2C3_SCL | PC,
+		.gpio_mode = MX6_PAD_GPIO_5__GPIO1_IO05 | PC,
+		.gp = IMX_GPIO_NR(1, 5)
+	},
+	.sda = {
+		.i2c_mode = MX6_PAD_EIM_D18__I2C3_SDA | PC,
+		.gpio_mode = MX6_PAD_EIM_D18__GPIO3_IO18 | PC,
+		.gp = IMX_GPIO_NR(3, 18)
+	}
+};
+
+#endif
+
+
+int dram_init(void)
+{
+	gd->ram_size = (get_ram_size((long *)PHYS_SDRAM, MAX_SDRAM_SIZE));
+
+	return 0;
+}
+
+iomux_v3_cfg_t const uart4_pads[] = {
+	MX6_PAD_KEY_COL0__UART4_TX_DATA | MUX_PAD_CTRL(UART_PAD_CTRL),
+	MX6_PAD_KEY_ROW0__UART4_RX_DATA | MUX_PAD_CTRL(UART_PAD_CTRL),
+};
+
+iomux_v3_cfg_t const enet_pads[] = {
+	MX6_PAD_ENET_CRS_DV__ENET_RX_EN | MUX_PAD_CTRL(ENET_PAD_CTRL),
+	MX6_PAD_GPIO_16__ENET_REF_CLK | MUX_PAD_CTRL(ENET_PAD_CTRL| PAD_CTL_SRE_FAST),
+	MX6_PAD_ENET_TX_EN__ENET_TX_EN	| MUX_PAD_CTRL(ENET_PAD_CTRL),
+	MX6_PAD_ENET_RXD1__ENET_RX_DATA1	| MUX_PAD_CTRL(ENET_PAD_CTRL),
+	MX6_PAD_ENET_RXD0__ENET_RX_DATA0	| MUX_PAD_CTRL(ENET_PAD_CTRL),
+	MX6_PAD_ENET_TXD1__ENET_TX_DATA1	| MUX_PAD_CTRL(ENET_PAD_CTRL),
+	MX6_PAD_ENET_TXD0__ENET_TX_DATA0	| MUX_PAD_CTRL(ENET_PAD_CTRL),
+	MX6_PAD_ENET_MDC__ENET_MDC	| MUX_PAD_CTRL(ENET_PAD_CTRL),
+	MX6_PAD_ENET_MDIO__ENET_MDIO	| MUX_PAD_CTRL(ENET_PAD_CTRL),
+	MX6_PAD_GPIO_17__GPIO7_IO12 | MUX_PAD_CTRL(NO_PAD_CTRL),
+};
+
+iomux_v3_cfg_t const edimm_ver_pads[] = {
+	MX6_PAD_EIM_BCLK__GPIO6_IO31 | MUX_PAD_CTRL(ENET_PAD_CTRL),
+};
+
+static void setup_iomux_enet(void)
+{
+	imx_iomux_v3_setup_multiple_pads(enet_pads, ARRAY_SIZE(enet_pads));
+}
+
+iomux_v3_cfg_t const usdhc1_pads[] = {
+	/*To avoid pin conflict with NAND, set usdhc1 to 4 pins*/
+	MX6_PAD_SD1_CLK__SD1_CLK	| MUX_PAD_CTRL(USDHC1_PAD_CTRL_CLK),
+	MX6_PAD_SD1_CMD__SD1_CMD	| MUX_PAD_CTRL(USDHC1_PAD_CTRL_NEW),
+	MX6_PAD_SD1_DAT0__SD1_DATA0	| MUX_PAD_CTRL(USDHC1_PAD_CTRL_NEW),
+	MX6_PAD_SD1_DAT1__SD1_DATA1	| MUX_PAD_CTRL(USDHC1_PAD_CTRL_NEW),
+	MX6_PAD_SD1_DAT2__SD1_DATA2	| MUX_PAD_CTRL(USDHC1_PAD_CTRL_NEW),
+	MX6_PAD_SD1_DAT3__SD1_DATA3	| MUX_PAD_CTRL(USDHC1_PAD_CTRL_NEW),
+
+	/*CD pin*/
+	MX6_PAD_GPIO_1__GPIO1_IO01 | MUX_PAD_CTRL(NO_PAD_CTRL),
+
+};
+
+#ifdef CONFIG_SYS_USE_NAND
+iomux_v3_cfg_t const usdhc2_emmc_pads[] = {
+};
+
+#else	/* eMMC version */
+iomux_v3_cfg_t const usdhc2_emmc_pads[] = {
+	MX6_PAD_SD3_RST__SD3_RESET | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD3_CLK__SD3_CLK | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD3_CMD__SD3_CMD | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD3_DAT0__SD3_DATA0| MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD3_DAT1__SD3_DATA1 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD3_DAT2__SD3_DATA2 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD3_DAT3__SD3_DATA3 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD3_DAT4__SD3_DATA4 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD3_DAT5__SD3_DATA5 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD3_DAT6__SD3_DATA6 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+	MX6_PAD_SD3_DAT7__SD3_DATA7 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
+};
+#endif 
+
+#ifdef CONFIG_I2C_MXC
+static int setup_pmic_voltages(void)
+{
+	unsigned char value, rev_id = 0 ;
+	i2c_init(CONFIG_SYS_I2C_SPEED, CONFIG_SYS_I2C_SLAVE);
+	if (!i2c_probe(0x8)) {
+		if (i2c_read(0x8, 0, 1, &value, 1)) {
+			printf("Read device ID error!\n");
+			return -1;
+		}
+		if (i2c_read(0x8, 3, 1, &rev_id, 1)) {
+			printf("Read Rev ID error!\n");
+			return -1;
+		}
+		printf("Found PFUZE100! deviceid=%x,revid=%x\n", value, rev_id);
+		/* set SW1AB staby volatage 0.975V*/
+		if (i2c_read(0x8, 0x21, 1, &value, 1)) {
+			printf("Read SW1ABSTBY error!\n");
+			return -1;
+		}
+		value &= ~0x3f;
+		value |= 0x1b;
+		if (i2c_write(0x8, 0x21, 1, &value, 1)) {
+			printf("Set SW1ABSTBY error!\n");
+			return -1;
+		}
+		/* set SW1AB/VDDARM step ramp up time from 16us to 4us/25mV */
+		if (i2c_read(0x8, 0x24, 1, &value, 1)) {
+			printf("Read SW1ABSTBY error!\n");
+			return -1;
+		}
+		value &= ~0xc0;
+		value |= 0x40;
+		if (i2c_write(0x8, 0x24, 1, &value, 1)) {
+			printf("Set SW1ABSTBY error!\n");
+			return -1;
+		}
+
+		/* set SW1C staby volatage 0.975V*/
+		if (i2c_read(0x8, 0x2f, 1, &value, 1)) {
+			printf("Read SW1CSTBY error!\n");
+			return -1;
+		}
+		value &= ~0x3f;
+		value |= 0x1b;
+		if (i2c_write(0x8, 0x2f, 1, &value, 1)) {
+			printf("Set SW1CSTBY error!\n");
+			return -1;
+		}
+
+		/* set SW1C/VDDSOC step ramp up time to from 16us to 4us/25mV */
+		if (i2c_read(0x8, 0x32, 1, &value, 1)) {
+			printf("Read SW1ABSTBY error!\n");
+			return -1;
+		}
+		value &= ~0xc0;
+		value |= 0x40;
+		if (i2c_write(0x8, 0x32, 1, &value, 1)) {
+			printf("Set SW1ABSTBY error!\n");
+			return -1;
+		}
+	}
+
+	return 0;
+}
+
+#endif
+
+void ldo_mode_set(int ldo_bypass)
+{
+	printf("i.Core ldo_mode_set removed \n");
+}
+
+static void setup_iomux_uart(void)
+{
+	imx_iomux_v3_setup_multiple_pads(uart4_pads, ARRAY_SIZE(uart4_pads));
+}
+
+#ifdef CONFIG_FSL_ESDHC
+
+#define USDHC1_CD_GPIO	IMX_GPIO_NR(1, 1)
+#define USDHC3_CD_GPIO	IMX_GPIO_NR(6, 15)
+
+struct fsl_esdhc_cfg usdhc_cfg[2] = {
+	{USDHC1_BASE_ADDR, 0, 4},
+	{USDHC3_BASE_ADDR, 0, 8},
+};
+
+int mmc_get_env_devno(void)
+{
+	u32 soc_sbmr = readl(SRC_BASE_ADDR + 0x4);
+	u32 dev_no;
+
+	/* BOOT_CFG2[3] and BOOT_CFG2[4] */
+	dev_no = (soc_sbmr & 0x00001800) >> 11;
+
+	/* need ubstract 1 to map to the mmc3 device id
+	 * see the comments in board_mmc_init function
+	 */
+	if (2 == dev_no)
+		dev_no--;
+	printf("mmc_get_env_devno returns %d\n", dev_no);
+	
+	return dev_no;
+}
+
+int board_mmc_getcd(struct mmc *mmc)
+{
+	struct fsl_esdhc_cfg *cfg = (struct fsl_esdhc_cfg *)mmc->priv;
+	int ret = 0;
+
+	switch (cfg->esdhc_base) {
+	case USDHC1_BASE_ADDR:
+		ret = !gpio_get_value(USDHC1_CD_GPIO);
+		break;
+	case USDHC3_BASE_ADDR:
+		ret = 1;
+		break;
+	}
+
+	return ret;
+}
+
+int board_mmc_init(bd_t *bis)
+{
+	int i;
+
+	/*
+	* According to the board_mmc_init() the following map is done:
+	* (U-boot device node)    (Physical Port)
+	* mmc0				USDHC1
+	* mmc1				USDHC3
+	*/
+	for (i = 0; i < CONFIG_SYS_FSL_USDHC_NUM; i++) {
+		switch (i) {
+		case 0:
+			imx_iomux_v3_setup_multiple_pads(
+				usdhc1_pads, ARRAY_SIZE(usdhc1_pads));
+			gpio_direction_input(USDHC1_CD_GPIO);
+			usdhc_cfg[0].sdhc_clk = mxc_get_clock(MXC_ESDHC_CLK);
+			break;
+		case 1:
+			imx_iomux_v3_setup_multiple_pads(
+				usdhc2_emmc_pads, ARRAY_SIZE(usdhc2_emmc_pads));
+			usdhc_cfg[1].sdhc_clk = mxc_get_clock(MXC_ESDHC3_CLK);
+			break;
+		default:
+			printf("Warning: you configured more USDHC controllers"
+				"(%d) than supported by the board\n", i + 1);
+			return 0;
+			}
+
+		if (fsl_esdhc_initialize(bis, &usdhc_cfg[i]))
+			printf("Warning: failed to initialize mmc dev %d\n", i);
+	}
+
+	return 0;
+}
+
+void board_late_mmc_env_init(void)
+{
+	char cmd[32];
+	u32 dev_no = mmc_get_env_devno();
+
+	setenv_ulong("mmcdev", dev_no);
+
+	sprintf(cmd, "mmc dev %d", dev_no);
+	run_command(cmd, 0);
+}
+
+#endif
+
+
+#ifdef CONFIG_SYS_USE_NAND
+iomux_v3_cfg_t gpmi_pads[] = {
+	MX6_PAD_NANDF_CLE__NAND_CLE		| MUX_PAD_CTRL(GPMI_PAD_CTRL2),
+	MX6_PAD_NANDF_ALE__NAND_ALE		| MUX_PAD_CTRL(GPMI_PAD_CTRL2),
+	MX6_PAD_NANDF_WP_B__NAND_WP_B		| MUX_PAD_CTRL(GPMI_PAD_CTRL2),
+	MX6_PAD_NANDF_RB0__NAND_READY_B		| MUX_PAD_CTRL(GPMI_PAD_CTRL0),
+	MX6_PAD_NANDF_CS0__NAND_CE0_B		| MUX_PAD_CTRL(GPMI_PAD_CTRL2),
+	MX6_PAD_SD4_CMD__NAND_RE_B		| MUX_PAD_CTRL(GPMI_PAD_CTRL2),
+	MX6_PAD_SD4_CLK__NAND_WE_B		| MUX_PAD_CTRL(GPMI_PAD_CTRL2),
+	MX6_PAD_NANDF_D0__NAND_DATA00		| MUX_PAD_CTRL(GPMI_PAD_CTRL2),
+	MX6_PAD_NANDF_D1__NAND_DATA01		| MUX_PAD_CTRL(GPMI_PAD_CTRL2),
+	MX6_PAD_NANDF_D2__NAND_DATA02		| MUX_PAD_CTRL(GPMI_PAD_CTRL2),
+	MX6_PAD_NANDF_D3__NAND_DATA03		| MUX_PAD_CTRL(GPMI_PAD_CTRL2),
+	MX6_PAD_NANDF_D4__NAND_DATA04		| MUX_PAD_CTRL(GPMI_PAD_CTRL2),
+	MX6_PAD_NANDF_D5__NAND_DATA05		| MUX_PAD_CTRL(GPMI_PAD_CTRL2),
+	MX6_PAD_NANDF_D6__NAND_DATA06		| MUX_PAD_CTRL(GPMI_PAD_CTRL2),
+	MX6_PAD_NANDF_D7__NAND_DATA07		| MUX_PAD_CTRL(GPMI_PAD_CTRL2),
+// TBD	MX6_PAD_SD4_DAT0__RAWNAND_DQS		| MUX_PAD_CTRL(GPMI_PAD_CTRL1),
+};
+
+static void setup_gpmi_nand(void)
+{
+	struct mxc_ccm_reg *mxc_ccm = (struct mxc_ccm_reg *)CCM_BASE_ADDR;
+	
+	printf("NAND FLASH iomux configured for storage memory\n");
+	
+	/* config gpmi nand iomux */
+	imx_iomux_v3_setup_multiple_pads(gpmi_pads, ARRAY_SIZE(gpmi_pads));
+
+	/* gate ENFC_CLK_ROOT clock first,before clk source switch */
+	clrbits_le32(&mxc_ccm->CCGR2, MXC_CCM_CCGR2_IOMUX_IPT_CLK_IO_MASK);
+
+	/* config gpmi and bch clock to 100 MHz */
+	clrsetbits_le32(&mxc_ccm->cs2cdr,
+			MXC_CCM_CS2CDR_ENFC_CLK_PODF_MASK |
+			MXC_CCM_CS2CDR_ENFC_CLK_PRED_MASK |
+			MXC_CCM_CS2CDR_ENFC_CLK_SEL_MASK,
+			MXC_CCM_CS2CDR_ENFC_CLK_PODF(0) |
+			MXC_CCM_CS2CDR_ENFC_CLK_PRED(3) |
+			MXC_CCM_CS2CDR_ENFC_CLK_SEL(3));
+
+	/* enable ENFC_CLK_ROOT clock */
+	setbits_le32(&mxc_ccm->CCGR2, MXC_CCM_CCGR2_IOMUX_IPT_CLK_IO_MASK);
+
+	/* enable gpmi and bch clock gating */
+	setbits_le32(&mxc_ccm->CCGR4,
+		     MXC_CCM_CCGR4_RAWNAND_U_BCH_INPUT_APB_MASK |
+		     MXC_CCM_CCGR4_RAWNAND_U_GPMI_BCH_INPUT_BCH_MASK |
+		     MXC_CCM_CCGR4_RAWNAND_U_GPMI_BCH_INPUT_GPMI_IO_MASK |
+		     MXC_CCM_CCGR4_RAWNAND_U_GPMI_INPUT_APB_MASK |
+		     MXC_CCM_CCGR4_PL301_MX6QPER1_BCH_OFFSET);
+
+	/* enable apbh clock gating */
+	setbits_le32(&mxc_ccm->CCGR0, MXC_CCM_CCGR0_APBHDMA_MASK);
+}
+#endif
+
+#ifdef CONFIG_CMD_SATA
+int setup_sata(void)
+{
+	struct iomuxc_base_regs *const iomuxc_regs
+		= (struct iomuxc_base_regs *) IOMUXC_BASE_ADDR;
+	int ret = enable_sata_clock();
+	if (ret)
+		return ret;
+
+	clrsetbits_le32(&iomuxc_regs->gpr[13],
+			IOMUXC_GPR13_SATA_MASK,
+			IOMUXC_GPR13_SATA_PHY_8_RXEQ_3P0DB
+			|IOMUXC_GPR13_SATA_PHY_7_SATA2M
+			|IOMUXC_GPR13_SATA_SPEED_3G
+			|(3<<IOMUXC_GPR13_SATA_PHY_6_SHIFT)
+			|IOMUXC_GPR13_SATA_SATA_PHY_5_SS_DISABLED
+			|IOMUXC_GPR13_SATA_SATA_PHY_4_ATTEN_9_16
+			|IOMUXC_GPR13_SATA_PHY_3_TXBOOST_0P00_DB
+			|IOMUXC_GPR13_SATA_PHY_2_TX_1P104V
+			|IOMUXC_GPR13_SATA_PHY_1_SLOW);
+
+	return 0;
+}
+#endif
+
+int mx6_rmii_rework(struct phy_device *phydev)
+{
+	/* enable master mode, force phy to 100Mbps */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x9, 0x1c00);
+
+	/* min rx data delay */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x0b, 0x8105);
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x0c, 0x0000);
+
+	/* max rx/tx clock delay, min rx/tx control delay */
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x0b, 0x8104);
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x0c, 0xf0f0);
+	phy_write(phydev, MDIO_DEVAD_NONE, 0x0b, 0x104);
+	return 0;
+}
+
+
+int board_phy_config(struct phy_device *phydev)
+{
+	mx6_rmii_rework(phydev);
+
+	if (phydev->drv->config)
+		phydev->drv->config(phydev);
+
+	return 0;
+}
+
+#if defined(CONFIG_VIDEO_IPUV3)
+static iomux_v3_cfg_t const rgb_pads[] = {
+	MX6_PAD_DI0_DISP_CLK__IPU1_DI0_DISP_CLK,
+	MX6_PAD_DI0_PIN15__IPU1_DI0_PIN15,
+	MX6_PAD_DI0_PIN2__IPU1_DI0_PIN02,
+	MX6_PAD_DI0_PIN3__IPU1_DI0_PIN03,	        
+	MX6_PAD_DISP0_DAT0__IPU1_DISP0_DATA00,
+	MX6_PAD_DISP0_DAT1__IPU1_DISP0_DATA01,
+	MX6_PAD_DISP0_DAT2__IPU1_DISP0_DATA02,
+	MX6_PAD_DISP0_DAT3__IPU1_DISP0_DATA03,
+	MX6_PAD_DISP0_DAT4__IPU1_DISP0_DATA04,
+	MX6_PAD_DISP0_DAT5__IPU1_DISP0_DATA05,
+	MX6_PAD_DISP0_DAT6__IPU1_DISP0_DATA06,
+	MX6_PAD_DISP0_DAT7__IPU1_DISP0_DATA07,
+	MX6_PAD_DISP0_DAT8__IPU1_DISP0_DATA08,
+	MX6_PAD_DISP0_DAT9__IPU1_DISP0_DATA09,
+	MX6_PAD_DISP0_DAT10__IPU1_DISP0_DATA10,
+	MX6_PAD_DISP0_DAT11__IPU1_DISP0_DATA11,
+	MX6_PAD_DISP0_DAT12__IPU1_DISP0_DATA12,
+	MX6_PAD_DISP0_DAT13__IPU1_DISP0_DATA13,
+	MX6_PAD_DISP0_DAT14__IPU1_DISP0_DATA14,
+	MX6_PAD_DISP0_DAT15__IPU1_DISP0_DATA15,
+	MX6_PAD_DISP0_DAT16__IPU1_DISP0_DATA16,
+	MX6_PAD_DISP0_DAT17__IPU1_DISP0_DATA17,
+};
+
+struct display_info_t {
+	int	bus;
+	int	addr;
+	int	pixfmt;
+	int	(*detect)(struct display_info_t const *dev);
+	void	(*enable)(struct display_info_t const *dev);
+	struct	fb_videomode mode;
+};
+
+static void enable_rgb(struct display_info_t const *dev)
+{
+	imx_iomux_v3_setup_multiple_pads(
+		rgb_pads,
+		 ARRAY_SIZE(rgb_pads));
+}
+
+
+static void disable_lvds(struct display_info_t const *dev)
+{
+	struct iomuxc *iomux = (struct iomuxc *)IOMUXC_BASE_ADDR;
+
+	int reg = readl(&iomux->gpr[2]);
+
+	reg &= ~(IOMUXC_GPR2_LVDS_CH0_MODE_MASK |
+		 IOMUXC_GPR2_LVDS_CH1_MODE_MASK);
+
+	writel(reg, &iomux->gpr[2]);
+}
+
+static void do_enable_hdmi(struct display_info_t const *dev)
+{
+	disable_lvds(dev);
+	imx_enable_hdmi_phy();
+}
+
+struct display_info_t const displays[] = {{
+	.bus	= -1,
+	.addr	= 0,
+	.pixfmt	= IPU_PIX_FMT_RGB666,
+	.detect	= NULL,
+	.enable	= enable_rgb,
+	.mode	= {
+		.name           = "Amp-WD",
+		.refresh        = 60,
+		.xres           = 800,
+		.yres           = 480,
+		.pixclock       = 30000,
+		.left_margin    = 30,
+		.right_margin   = 30,
+		.upper_margin   = 5,
+		.lower_margin   = 5,
+		.hsync_len      = 64,
+		.vsync_len      = 20,
+		.sync           = FB_SYNC_CLK_LAT_FALL,
+		.vmode          = FB_VMODE_NONINTERLACED
+} }, {
+	.bus	= -1,
+	.addr	= 0,
+	.pixfmt	= IPU_PIX_FMT_RGB666,
+	.detect	= NULL,
+	.enable	= enable_rgb,
+	.mode	= {
+		.name           = "LDB-WXGAI",
+		.refresh        = 60,
+		.xres           = 1280,
+		.yres           = 800,
+		.pixclock       = 14065,
+		.left_margin    = 40,
+		.right_margin   = 40,
+		.upper_margin   = 10,
+		.lower_margin   = 3,
+		.hsync_len      = 80,
+		.vsync_len      = 10,
+		.sync           = FB_SYNC_CLK_LAT_FALL,
+		.vmode          = FB_VMODE_NONINTERLACED
+} }, {
+	.bus	= -1,
+	.addr	= 0,
+	.pixfmt	= IPU_PIX_FMT_RGB666,
+	.detect	= NULL,
+	.enable	= NULL,
+	.mode	= {
+		.name           = "URT-8484MD",
+		.refresh        = 60,
+		.xres           = 480,
+		.yres           = 272,
+		.pixclock       = 100000,
+		.left_margin    = 8,
+		.right_margin   = 2,
+		.upper_margin   = 11,
+		.lower_margin   = 2,
+		.hsync_len      = 35,
+		.vsync_len      = 2,
+		.sync           = FB_SYNC_CLK_LAT_FALL,
+		.vmode          = FB_VMODE_NONINTERLACED
+} }, {
+	.bus	= -1,
+	.addr	= 0,
+	.pixfmt	= IPU_PIX_FMT_RGB666,
+	.detect	= NULL,
+	.enable	= NULL,
+	.mode	= {
+		.name           = "URT-VGA",
+		.refresh        = 60,
+		.xres           = 640,
+		.yres           = 480,
+		.pixclock       = 38000,
+		.left_margin    = 80,
+		.right_margin   = 80,
+		.upper_margin   = 22,
+		.lower_margin   = 22,
+		.hsync_len      = 30,
+		.vsync_len      = 3,
+		.sync           = FB_SYNC_CLK_LAT_FALL,
+		.vmode          = FB_VMODE_NONINTERLACED
+} }, {
+	.bus	= -1,
+	.addr	= 0,
+	.pixfmt	= IPU_PIX_FMT_RGB666,
+	.detect	= NULL,
+	.enable	= NULL,
+	.mode	= {
+		.name           = "URT-LVDS",
+		.refresh        = 60,
+		.xres           = 800,
+		.yres           = 480,
+		.pixclock       = 30000,
+		.left_margin    = 30,
+		.right_margin   = 30,
+		.upper_margin   = 5,
+		.lower_margin   = 5,
+		.hsync_len      = 64,
+		.vsync_len      = 20,
+		.sync           = FB_SYNC_CLK_LAT_FALL,
+		.vmode          = FB_VMODE_NONINTERLACED
+} }, {
+	.bus	= -1,
+	.addr	= 0,
+	.pixfmt	= IPU_PIX_FMT_RGB666,
+	.detect	= NULL,
+	.enable	= NULL,
+	.mode	= {
+		.name           = "HIT-LVDS",
+		.refresh        = 60,
+		.xres           = 800,
+		.yres           = 600,
+		.pixclock       = 30000,
+		.left_margin    = 30,
+		.right_margin   = 30,
+		.upper_margin   = 5,
+		.lower_margin   = 5,
+		.hsync_len      = 64,
+		.vsync_len      = 20,
+		.sync           = FB_SYNC_CLK_LAT_FALL,
+		.vmode          = FB_VMODE_NONINTERLACED
+} }, {
+	.bus	= -1,
+	.addr	= 0,
+	.pixfmt	= IPU_PIX_FMT_RGB666,
+	.detect	= NULL,
+	.enable	= NULL,
+	.mode	= {
+		.name           = "LDB-WSGA",
+		.refresh        = 60,
+		.xres           = 1024,
+		.yres           = 600,
+		.pixclock       = 18939,
+		.left_margin    = 353,
+		.right_margin   = 47,
+		.upper_margin   = 39,
+		.lower_margin   = 4,
+		.hsync_len      = 8,
+		.vsync_len      = 2,
+		.sync           = FB_SYNC_CLK_LAT_FALL | FB_SYNC_COMP_HIGH_ACT | FB_SYNC_VERT_HIGH_ACT,
+		.vmode          = FB_VMODE_NONINTERLACED
+} }, {
+	.bus	= -1,
+	.addr	= 0,
+	.pixfmt	= IPU_PIX_FMT_RGB666,
+	.detect	= NULL,
+	.enable	= NULL,
+	.mode	= {
+		.name           = "AM480x272",
+		.refresh        = 60,
+		.xres           = 480,
+		.yres           = 272,
+		.pixclock       = 100000,
+		.left_margin    = 8,
+		.right_margin   = 11,
+		.upper_margin   = 2,
+		.lower_margin   = 35,
+		.hsync_len      = 2,
+		.vsync_len      = 0,
+		.sync           = FB_VMODE_NONINTERLACED,
+		.vmode          = 0
+} }, {
+	.bus	= -1,
+	.addr	= 0,
+	.pixfmt	= IPU_PIX_FMT_RGB666,
+	.detect	= NULL,
+	.enable	= NULL,
+	.mode	= {
+		.name           = "URT-WVGA",
+		.refresh        = 60,
+		.xres           = 800,
+		.yres           = 480,
+		.pixclock       = 30000,
+		.left_margin    = 30,
+		.right_margin   = 30,
+		.upper_margin   = 5,
+		.lower_margin   = 5,
+		.hsync_len      = 64,
+		.vsync_len      = 20,
+		.sync           = FB_SYNC_CLK_IDLE_EN,
+		.vmode          = FB_VMODE_NONINTERLACED
+} }, {
+	.bus	= -1,
+	.addr	= 0,
+	.pixfmt	= IPU_PIX_FMT_RGB24,
+	.detect	= NULL,
+	.enable	= do_enable_hdmi,
+	.mode	= {
+		.name           = "HDMI",
+		.refresh        = 60,
+		.xres           = 640,
+		.yres           = 480,
+		.pixclock       = 39721,
+		.left_margin    = 48,
+		.right_margin   = 16,
+		.upper_margin   = 33,
+		.lower_margin   = 10,
+		.hsync_len      = 96,
+		.vsync_len      = 2,
+		.sync           = 0,
+		.vmode          = FB_VMODE_NONINTERLACED
+} } };
+
+size_t display_count = ARRAY_SIZE(displays);
+
+#define RGB_BACKLIGHT_REVB 	IMX_GPIO_NR(4, 20)
+#define RGB_BACKLIGHT_GP 	IMX_GPIO_NR(2, 9)
+
+iomux_v3_cfg_t const backlight_pads[] = {
+	MX6_PAD_DI0_PIN4__GPIO4_IO20 | MUX_PAD_CTRL(ENET_PAD_CTRL),
+	MX6_PAD_SD4_DAT1__GPIO2_IO09  | MUX_PAD_CTRL(ENET_PAD_CTRL),
+};
+
+void board_set_backlight (int status)
+{
+	gpio_direction_output(RGB_BACKLIGHT_GP,   status);
+	gpio_direction_output(RGB_BACKLIGHT_REVB, status);
+}
+
+static void setup_iomux_backlight(void)
+{
+	imx_iomux_v3_setup_multiple_pads(backlight_pads,
+					 ARRAY_SIZE(backlight_pads));
+}
+
+static void setup_display(void)
+{
+	struct mxc_ccm_reg *mxc_ccm = (struct mxc_ccm_reg *)CCM_BASE_ADDR;
+#ifdef TOLTO_ML
+	struct anatop_regs *anatop = (struct anatop_regs *)ANATOP_BASE_ADDR;
+#endif
+	struct iomuxc *iomux = (struct iomuxc *)IOMUXC_BASE_ADDR;
+	int reg;
+
+	setup_iomux_backlight();
+	board_set_backlight(0);
+	enable_ipu_clock();
+	imx_setup_hdmi();
+
+	/* Turn on LDB0,IPU,IPU DI0 clocks */
+	reg = __raw_readl(&mxc_ccm->CCGR3);
+	reg |=  (MXC_CCM_CCGR3_LDB_DI0_MASK | 0xffff); //TBD MM MP:
+	writel(reg, &mxc_ccm->CCGR3);
+#ifdef TOLTO_ML
+	/* set PFD1_FRAC to 0x13 == 455 MHz (480*18)/0x13 */
+	writel(ANATOP_PFD_480_PFD1_FRAC_MASK, &anatop->pfd_480_clr);
+	writel(0x13<<ANATOP_PFD_480_PFD1_FRAC_SHIFT, &anatop->pfd_480_set);
+#endif
+	/* set LDB0, LDB1 clk select to 011/011 */
+	reg = readl(&mxc_ccm->cs2cdr);
+	reg &= ~(MXC_CCM_CS2CDR_LDB_DI0_CLK_SEL_MASK
+		 |MXC_CCM_CS2CDR_LDB_DI1_CLK_SEL_MASK);
+	reg |= (3<<MXC_CCM_CS2CDR_LDB_DI0_CLK_SEL_OFFSET)
+	      |(3<<MXC_CCM_CS2CDR_LDB_DI1_CLK_SEL_OFFSET);
+	writel(reg, &mxc_ccm->cs2cdr);
+
+	reg = readl(&mxc_ccm->cscmr2);
+	reg |= MXC_CCM_CSCMR2_LDB_DI0_IPU_DIV;
+	writel(reg, &mxc_ccm->cscmr2);
+
+	reg = readl(&mxc_ccm->chsccdr);
+	reg |= (CHSCCDR_CLK_SEL_LDB_DI0
+		<<MXC_CCM_CHSCCDR_IPU1_DI0_CLK_SEL_OFFSET);
+	writel(reg, &mxc_ccm->chsccdr);
+
+	reg = IOMUXC_GPR2_BGREF_RRMODE_EXTERNAL_RES
+	     |IOMUXC_GPR2_DI1_VS_POLARITY_ACTIVE_HIGH
+	     |IOMUXC_GPR2_DI0_VS_POLARITY_ACTIVE_LOW
+	     |IOMUXC_GPR2_BIT_MAPPING_CH1_SPWG
+	     |IOMUXC_GPR2_DATA_WIDTH_CH1_18BIT
+	     |IOMUXC_GPR2_BIT_MAPPING_CH0_SPWG
+	     |IOMUXC_GPR2_DATA_WIDTH_CH0_18BIT
+	     |IOMUXC_GPR2_LVDS_CH1_MODE_DISABLED
+	     |IOMUXC_GPR2_LVDS_CH0_MODE_ENABLED_DI0;
+
+	reg &= ~(IOMUXC_GPR2_LVDS_CH0_MODE_MASK |
+		 IOMUXC_GPR2_LVDS_CH1_MODE_MASK);
+	writel(reg, &iomux->gpr[2]);
+
+	reg = readl(&iomux->gpr[3]);
+	reg = (reg & ~IOMUXC_GPR3_LVDS0_MUX_CTL_MASK)
+	    | (IOMUXC_GPR3_MUX_SRC_IPU1_DI0
+	       <<IOMUXC_GPR3_LVDS0_MUX_CTL_OFFSET);
+	writel(reg, &iomux->gpr[3]);
+}
+#endif /* CONFIG_VIDEO_IPUV3 */
+
+/*
+ * Do not overwrite the console
+ * Use always serial for U-Boot console
+ */
+int overwrite_console(void)
+{
+	return 1;
+}
+
+
+static int enable_enet_clock(void)
+{
+	u32 reg = 0;
+	s32 timeout = 100000;
+
+	struct mxc_ccm_reg *ccm = (struct mxc_ccm_reg *)CCM_BASE_ADDR;
+
+	/* Enable fec clock */
+	reg = readl(&ccm->CCGR1);
+	reg |= (0x3 << 10);
+	writel(reg, &ccm->CCGR1);
+
+	/* Enable PLLs and set 50MHz for enet */
+	reg = readl(ANATOP_BASE_ADDR+0xE0);
+	reg &= ~(1<<12);
+	writel(reg, ANATOP_BASE_ADDR+0xE0);
+	reg &= ~0x03;
+	reg |= 1;	/* 50 MHz */
+	writel(reg, ANATOP_BASE_ADDR+0xE0);
+	reg |= (1<<13);	// BM_ANADIG_PLL_SYS_ENABLE
+	while (timeout--) {
+		if (readl(ANATOP_BASE_ADDR+0xE0) & (1<<31)/*BM_ANADIG_PLL_SYS_LOCK*/)
+			break;
+	}
+	if (timeout <= 0)
+	{
+		printf("ENET PLL Not locked!!\n");
+		return -EIO;
+	}
+	reg &= ~(1<<16); //BM_ANADIG_PLL_SYS_BYPASS;
+	writel(reg, ANATOP_BASE_ADDR+0xE0);
+	return 0 ;
+}
+
+#define ENET_PHY_RST IMX_GPIO_NR(7, 12)
+int board_eth_init(bd_t *bis)
+{
+	int ret, reg;
+
+	struct iomuxc *iomux = (struct iomuxc *)IOMUXC_BASE_ADDR;
+
+	udelay(100000);
+	
+	/* set gpr1[ENET_CLK_SEL] */
+	reg = readl(&iomux->gpr[1]);
+
+	if(gpio_get_value(EDIMM_VERSION))
+		reg &= ~(IOMUXC_GPR1_ENET_CLK_SEL_MASK);	/* EDIMM standard */
+	else
+		reg |= (IOMUXC_GPR1_ENET_CLK_SEL_MASK);		/* EDIMM 1.5 */
+
+	writel(reg, &iomux->gpr[1]);
+
+
+	setup_iomux_enet();
+
+	enable_enet_clock();
+
+	gpio_direction_output(ENET_PHY_RST, 0);
+	udelay(10000);
+	gpio_set_value(ENET_PHY_RST, 1);
+	udelay(1000);
+	ret = cpu_eth_init(bis);
+
+	if (ret)
+		printf("FEC MXC: %s:failed\n", __func__);
+
+	return 0;
+}
+
+
+u32 get_board_rev(void)
+{
+	return (0);
+}
+
+int board_early_init_f(void)
+{
+	setup_iomux_uart();
+	SETUP_IOMUX_PADS(edimm_ver_pads);
+	gpio_direction_input(EDIMM_VERSION);
+	return 0;
+}
+
+#define MACH_TYPE_MX6Q_SABRELITE       3769
+
+int board_init(void)
+{
+	/* address of boot parameters */
+	gd->bd->bi_boot_params = PHYS_SDRAM + 0x100;
+	
+	/* For kernel 3.0.35 */
+	gd->bd->bi_dram[0].start = PHYS_SDRAM;
+	gd->bd->bi_dram[0].size = gd->ram_size;
+	gd->bd->bi_arch_number = MACH_TYPE_MX6Q_SABRELITE;
+
+	setup_iomux_enet();
+
+#if defined(CONFIG_VIDEO_IPUV3)
+	setup_display();
+#endif
+
+#ifdef CONFIG_SYS_USE_NAND
+	setup_gpmi_nand();
+#endif
+
+#ifdef CONFIG_CMD_SATA
+	setup_sata();
+#endif
+
+	if(gpio_get_value(EDIMM_VERSION))
+		printf("EDIMM standard 1.0 version\n");
+	else
+		printf("EDIMM 1.5 version\n");
+
+	return 0;
+}
+
+#ifdef CONFIG_CMD_BMODE
+static const struct boot_mode board_boot_modes[] = {
+	/* 4 bit bus width */
+	{"mmc0", MAKE_CFGVAL(0x40, 0x30, 0x00, 0x00)},
+	{NULL,   0},
+};
+#endif
+
+int board_late_init(void)
+{
+
+#ifdef CONFIG_CMD_BMODE
+	add_board_boot_modes(board_boot_modes);
+#endif
+
+#ifdef CONFIG_I2C_MXC
+
+	int ret;
+
+	setup_i2c(1, CONFIG_SYS_I2C_SPEED,
+			CONFIG_SYS_I2C_SLAVE, &i2c_pad_info1);
+
+	/*setup i2c info 2*/
+	setup_i2c(2, CONFIG_SYS_I2C_SPEED,
+					CONFIG_SYS_I2C_SLAVE + 1, &i2c_pad_info2);
+
+	if (ret)
+		return -1;
+#endif
+
+#ifdef CONFIG_ENV_IS_IN_MMC
+	board_late_mmc_env_init();
+#endif
+
+	return 0;
+}
+
+#ifdef CONFIG_FASTBOOT
+
+void board_fastboot_setup(void)
+{
+	switch (get_boot_device()) {
+#if defined(CONFIG_FASTBOOT_STORAGE_SATA)
+	case SATA_BOOT:
+		if (!getenv("fastboot_dev"))
+			setenv("fastboot_dev", "sata");
+		if (!getenv("bootcmd"))
+			setenv("bootcmd", "booti sata");
+		break;
+#endif /*CONFIG_FASTBOOT_STORAGE_SATA*/
+#if defined(CONFIG_FASTBOOT_STORAGE_MMC)
+	case SD1_BOOT:
+	case MMC1_BOOT:
+		if (!getenv("fastboot_dev"))
+			setenv("fastboot_dev", "mmc0");
+		if (!getenv("bootcmd"))
+			setenv("bootcmd", "booti mmc0");
+		break;
+	case SD3_BOOT:
+	case MMC3_BOOT:
+		if (!getenv("fastboot_dev"))
+			setenv("fastboot_dev", "mmc1");
+		if (!getenv("bootcmd"))
+			setenv("bootcmd", "booti mmc1");
+		break;
+#endif /*CONFIG_FASTBOOT_STORAGE_MMC*/
+#if defined(CONFIG_FASTBOOT_STORAGE_NAND)
+	case NAND_BOOT:
+		if (!getenv("fastboot_dev"))
+			setenv("fastboot_dev", "nand");
+		if (!getenv("fbparts"))
+			setenv("fbparts",
+			 "16m@16m(boot) 128m@32m(recovery) 810m@160m(android_root)ubifs");
+		if (!getenv("bootcmd"))
+			setenv("bootcmd",
+				"nand read ${loadaddr} ${boot_nand_offset} "
+				"${boot_nand_size};booti ${loadaddr}");
+		break;
+#endif /*CONFIG_FASTBOOT_STORAGE_NAND*/
+	default:
+		printf("unsupported boot devices\n");
+		break;
+	}
+}
+
+#ifdef CONFIG_ANDROID_RECOVERY
+
+#define GPIO_VOL_DN_KEY IMX_GPIO_NR(5, 14)
+iomux_v3_cfg_t const recovery_key_pads[] = {
+	(MX6_PAD_DISP0_DAT20__GPIO5_IO14 | MUX_PAD_CTRL(NO_PAD_CTRL)),
+};
+
+int check_recovery_cmd_file(void)
+{
+	int button_pressed = 0;
+	int recovery_mode = 0;
+
+	recovery_mode = recovery_check_and_clean_flag();
+
+	/* Check Recovery Combo Button press or not. */
+	imx_iomux_v3_setup_multiple_pads(recovery_key_pads,
+		ARRAY_SIZE(recovery_key_pads));
+
+	gpio_direction_input(GPIO_VOL_DN_KEY);
+
+	if (gpio_get_value(GPIO_VOL_DN_KEY) == 0) { /* VOL_DN key is low assert */
+		button_pressed = 1;
+		printf("Recovery key pressed\n");
+	}
+
+	return recovery_mode || button_pressed;
+}
+
+void board_recovery_setup(void)
+{
+	int bootdev = get_boot_device();
+
+	switch (bootdev) {
+#if defined(CONFIG_FASTBOOT_STORAGE_SATA)
+	case SATA_BOOT:
+		if (!getenv("bootcmd_android_recovery"))
+			setenv("bootcmd_android_recovery", "booti sata recovery");
+		break;
+#endif /*CONFIG_FASTBOOT_STORAGE_SATA*/
+#if defined(CONFIG_FASTBOOT_STORAGE_MMC)
+	case SD1_BOOT:
+	case MMC1_BOOT:
+		if (!getenv("bootcmd_android_recovery"))
+			setenv("bootcmd_android_recovery", "booti mmc0 recovery");
+		break;
+	case SD3_BOOT:
+	case MMC3_BOOT:
+		if (!getenv("bootcmd_android_recovery"))
+			setenv("bootcmd_android_recovery", "booti mmc1 recovery");
+		break;
+#endif /*CONFIG_FASTBOOT_STORAGE_MMC*/
+#if defined(CONFIG_FASTBOOT_STORAGE_NAND)
+	case NAND_BOOT:
+		if (!getenv("bootcmd_android_recovery"))
+			setenv("bootcmd_android_recovery",
+				"nand read ${loadaddr} ${recovery_nand_offset} "
+				"${recovery_nand_size};booti ${loadaddr}");
+		break;
+#endif /*CONFIG_FASTBOOT_STORAGE_NAND*/
+	default:
+		printf("Unsupported bootup device for recovery: dev: %d\n",
+			bootdev);
+		return;
+	}
+
+	printf("setup env for recovery..\n");
+	setenv("bootcmd", "run bootcmd_android_recovery");
+}
+#endif /*CONFIG_ANDROID_RECOVERY*/
+
+#endif /*CONFIG_FASTBOOT*/
+
+int checkboard(void)
+{
+#if defined CONFIG_MX6Q
+	printf("Board: i.Core M6Q\n");
+#elif defined CONFIG_MX6D
+	printf("Board: i.Core M6D\n");
+#elif defined CONFIG_MX6DL
+	printf("Board: i.Core M6DL\n");
+#else
+	printf("Board: i.Core M6S\n");
+#endif
+	return 0;
+}
+
+#ifdef CONFIG_IMX_UDC
+iomux_v3_cfg_t const otg_udc_pads[] = {
+	(MX6_PAD_ENET_RX_ER__USB_OTG_ID | MUX_PAD_CTRL(NO_PAD_CTRL)),
+};
+void udc_pins_setting(void)
+{
+	imx_iomux_v3_setup_multiple_pads(otg_udc_pads,
+		ARRAY_SIZE(otg_udc_pads));
+
+	/*set daisy chain for otg_pin_id on 6q. for 6dl, this bit is reserved*/
+    imx_iomux_set_gpr_register(1, 13, 1, 0);
+}
+
+#endif /*CONFIG_IMX_UDC*/
+
+#ifdef CONFIG_USB_EHCI_MX6
+iomux_v3_cfg_t const usb_otg_pads[] = {
+	MX6_PAD_ENET_RX_ER__USB_OTG_ID | MUX_PAD_CTRL(NO_PAD_CTRL),
+};
+
+int board_ehci_hcd_init(int port)
+{
+	switch (port) {
+	case 0:
+		imx_iomux_v3_setup_multiple_pads(usb_otg_pads,
+			ARRAY_SIZE(usb_otg_pads));
+
+		/*set daisy chain for otg_pin_id on 6q. for 6dl, this bit is reserved*/
+		imx_iomux_set_gpr_register(1, 13, 1, 0);
+		break;
+	case 1:
+		break;
+	default:
+		printf("MXC USB port %d not yet supported\n", port);
+		return 1;
+	}
+	return 0;
+}
+
+int board_ehci_power(int port, int on)
+{
+	switch (port) {
+	case 0:
+		// TBD
+		break;
+	case 1:
+		break;
+	default:
+		printf("MXC USB port %d not yet supported\n", port);
+		return 1;
+	}
+	return 0;
+}
+#endif
diff --git a/include/configs/icorem6.h b/include/configs/icorem6.h
index 7c9d177..531f4e5 100644
--- a/include/configs/icorem6.h
+++ b/include/configs/icorem6.h
@@ -44,12 +44,13 @@
 #define CONFIG_CMDLINE_EDITING
 
 #define SHOW_ENGICAM_NOTE        "Note:    iCoreM6 default U-Boot\n"
-
+/*
 #if defined(CONFIG_MX6Q)
 	#define CONFIG_DEFAULT_FDT_FILE	"icoremx6q-starterkit.dtb"
 #elif defined(CONFIG_MX6DL) || defined(CONFIG_MX6SOLO)
 	#define CONFIG_DEFAULT_FDT_FILE	"icoremx6dl-starterkit.dtb"
 #endif
+*/
 
 #ifndef CONFIG_SYS_BOOT_EMMC
 	#define CONFIG_SYS_FSL_USDHC_NUM	1
@@ -129,7 +130,7 @@
 	"mtdparts=mtdparts=gpmi-nand:4m(boot),8m(kernel),1m(dtb),-(rootfs)\0"								\
 	"bootcmd_mmc="  YOCTO_BOOTCMD_MMC_ICORE "\0"											\
 	"video_type=mxcfb0:dev=lcd\0"													\
-	"fdt_file=" CONFIG_DEFAULT_FDT_FILE "\0" 											\
+	"fdt_file="	__stringify(CONFIG_FDT_FILE)"\0" 											\
 	"fdt_addr=0x18000000\0" 													\
 
 #include "icorem6_common.h"
-- 
2.7.4

